#!/usr/bin/env node

//引入配置工具文件
var envCfg = require('../config/env_cfg');
var logCfg = require('../config/log_cfg');
var fileUtil = require('../utils/file_util');


/*********************************** ONEBIT ***********************************/
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || envCfg.port || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*********************************** ONEBIT ***********************************/
// 输出环境配置
console.log("ONEBIT NODE_ENV : " + (process.env.NODE_ENV || envCfg.env));
// 打印输出端口号
console.log('ONEBIT PORT : ' + envCfg.port);

// /**
//  * 初始化log相关目录
//  */
// if (logCfg.baseLogPath)
// {
//   fileUtil.confirmPath(logCfg.baseLogPath)
//   //根据不同的logType创建不同的文件目录
//   for (let key in log.appenders)
//   // for(var i = 0, len = logCfg.appenders.length; i < len; i++)
//   {
//     if (logCfg.appenders[key].path)
//     {
//       fileUtil.confirmPath(logCfg.baseLogPath + logCfg.appenders[i].path);
//     }
//   }
// }

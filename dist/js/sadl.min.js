var Utils={getBarData:function(e){var s=e.children,a={labels:[],series:[]},l=[];return s.forEach(function(e){a.labels.push(e.name),l.push(e.children.length)}),a.series.push({label:"Projects count",values:l}),a}};
var Search=function(){var e,o,r,t=[],c={q:"onebitxy",sort:"forks",order:"desc",per_page:100};return{init:function(n){e=n,r=d3.select("#search-btn"),o=d3.select("#search-input"),r.on("click",function(){var r=function(n){c.q=n||"onebitxy";var r=[];for(var o in c)r.push(o+"="+c[o]);return e+"?"+r.join("&")}(o.property("value"));console.log(r),t.forEach(function(n){try{n(r)}catch(n){console.log(n)}})})},addListener:function(n){t.push(n)}}}();
var Bar=function(){var d,f=300,h=20,g=0,p=10,x=150,v=150,m=[];return{init:function(t,e){d3.select("#barTitle").text(t),chart=d3.select(e).append("svg").attr("class","chart")},show:function(t){!function(r){m=[],g=h*(r=r||{}).series.length,function(t){for(var e=0;e<t.labels.length;e++)for(var r=0;r<t.series.length;r++)m.push(t.series[r].values[e])}(r);var a=d3.scaleOrdinal(d3.schemeCategory20),t=h*m.length+p*r.labels.length,e=d3.scaleLinear().domain([0,d3.max(m)]).range([0,f]),n=d3.scaleLinear().range([t+p,0]);d=d3.axisLeft(n).tickFormat("").tickSize(0);var l=chart.attr("width",x+f+v).attr("height",t),s=l.selectAll("g").data(m,function(t,e){return[t,e]}),i=s.enter().append("g").attr("transform",function(t,e){return"translate("+x+","+(e*h+p*(.5+Math.floor(e/r.series.length)))+")"});i.append("rect").attr("fill",function(t,e){return a(e%r.series.length)}).attr("class","bar").attr("width",e).attr("height",h-1),i.append("text").attr("x",function(t){return e(t)-3}).attr("y",h/2).attr("fill","red").attr("dy",".35em").text(function(t){return t}),i.append("text").attr("class","label").attr("x",function(t){return-10}).attr("y",g/2).attr("dy",".35em").text(function(t,e){return e%r.series.length==0?r.labels[Math.floor(e/r.series.length)]:""}),s.exit().transition().remove(),l.append("g").attr("class","y axis").attr("transform","translate("+x+", "+-p/2+")").call(d);var c=18,o=l.selectAll(".legend").data(r.series),u=o.enter().append("g").attr("transform",function(t,e){var r=-p/2,a=x+f+40-c,n=22*e-r;return"translate("+a+","+n+")"});u.append("rect").attr("width",c).attr("height",c).style("fill",function(t,e){return a(e)}).style("stroke",function(t,e){return a(e)}),u.append("text").attr("class","legend").attr("x",22).attr("y",14).text(function(t){return t.label}),o.exit().remove()}(t)}}}();
!function(){var e="http://127.0.0.1:8081/api/repo/search",i=document.getElementById("onesadl");function a(t){t=t||e;var n=setTimeout(function(){i.style.display="block"},300);d3.json(t,function(t,e){t&&(clearTimeout(n),i.style.display="none",alert("LOAD ERROR! CHECK NETWORK..."));var a=e.data;Bar.show(Utils.getBarData(a)),clearTimeout(n),i.style.display="none"})}Search.init(e),Bar.init("TOP DEV LANGUAGES","#barId"),Search.addListener(function(t){a(t)}),a()}();
//# sourceMappingURL=data:application/json;base64,
